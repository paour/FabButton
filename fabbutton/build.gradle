/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Kurt Mbanje
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def siteUrl = 'https://github.com/ckurtm/FabButton'
def gitUrl = 'https://github.com/ckurtm/FabButton.git'

version = "1.2.5"

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion compileVersion
    buildToolsVersion toolsVersion

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion targetVersion
        versionCode 11
        versionName version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

bintray {
    user = rootProject.ext.bintrayUser
    key = rootProject.ext.bintrayApiKey
    publications = ['maven']
    publish = true
    override = true
    pkg {
        repo = "com-feeligo-stickers-private"
        name = "FabButton"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publicDownloadNumbers = true
        userOrg = 'feeligo'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'FabButton'
            artifactId project.name
            version project.version
            artifact "${buildDir}/outputs/aar/${project.name}.aar"
            artifact "${buildDir}/outputs/aar/${project.name}-release.aar"
            artifact "${buildDir}/outputs/aar/${project.name}-debug.aar"
            artifact "${buildDir}/outputs/aar/${project.name}-library-release.aar"
            artifact "${buildDir}/outputs/aar/${project.name}-library-debug.aar"
            if (tasks.findByPath(':' + project.name + ':sourceJar')) {
                artifact sourceJar
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                asNode().getByName("packaging").first().setValue("aar")

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    // exclude the 'library' dependency, which is published under a different name to maven, and would mess the pom
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintrayUpload.dependsOn { generatePomFileForMavenPublication }

dependencies {
    compile "com.android.support:design:$googleLibraryVersion"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}



